namespace OsirisI {
	
#define OS_OK 0x00000000
#define OS_NOT_IMPLEMENTED 0x00000001
#define OS_BLENDSTATE_NOT_CREATED 0x00000002
#define OS_RASTERIZERSTATE_NOT_CREATED 0x00000003
#define OS_RENDERTARGETVIEW_NOT_CREATED 0x00000004
#define OS_TEXTURE2D_NOT_CREATED 0x00000005
#define OS_DEPTHSTENCILSTATE_NOT_CREATED 0x00000006
#define OS_DEPTHSTENCILVIEW_NOT_CREATED 0x00000007
#define OS_DXGI_ACTION_FAILED 0x00000008
#define OS_DEVICE_AND_SWAPCHAIN_NOT_CREATED 0x00000009
#define OS_REGISTERCLASS_FAILED 0x0000000A
#define OS_ADJUSTWINDOWRECT_FAILED 0x0000000B
#define OS_CREATEWINDOW_FAILED 0x0000000C
#define OS_SHOWWINDOW_FAILED 0x0000000D
#define OS_UPDATEWINDOW_FAILED 0x0000000E
#define OS_SETFOCUS_FAILED 0x0000000F
#define OS_LOGGERTYPE_UNKNOWN 0x00000010
#define OS_OPEN_FILE_FAILED 0x00000011
#define OS_ZIP_READ_FAILED 0x00000012
#define OS_CLOSE_FILE_FAILED 0x00000013
#define OS_INDEXBUFFER_NOT_CREATED 0x00000014
#define OS_VERTEXBUFFER_NOT_CREATED 0x00000015
#define OS_CACHE_RESOURCE_ALREADY_LOADED 0x00000016
#define OS_CACHE_RESOURCE_NOT_LOADED 0x00000017
#define OS_NO_LOADER_AVAILABLE 0x00000018
#define OS_RESOURCEVALUE_NOT_RELEASABLE 0x00000019
#define OS_OBJECT_NOT_FOUND 0x0000001A
#define OS_GAMESTATE_STILL_ACTIVE 0x0000001B
#define OS_EVENT_NOT_REGISTERED 0x0000001C
#define OS_EVENT_ALREADY_REGISTERED 0x0000001D
#define OS_OBJECT_ALREADY_QUEUED 0x0000001E
#define OS_OBJECT_ALREADY_EXISTS 0x0000001F
#define OS_OBJECT_STILL_IN_USE 0x00000020
#define OS_DIRECTXERROR 0x00000021
#define OS_INITIALIZATION_FAILED 0x00000022
#define OS_BUFFER_NOT_CREATED 0x00000023
#define OS_RESOURCEMAPPING_FAILED 0x00000024
#define OS_SHADER_NOT_CREATED 0x00000025
#define OS_EVENT_NOT_HANDLED 0x00000026
#define OS_SCENE_ACTIVATION_FAILED 0x00000027
#define OS_ERROR_NOT_SPECIFIED 0x00000028
#define OS_SHUTDOWN_PROCEDURE 0x00000029
#define OS_WRONG_OR_UNKNOWN_PERSISTOR_TYPE 0x0000002A

#define OS_CHECKSTATE_LOG(x) do { \
	ReturnState state = (x);  \
	if (state != OS_OK) {  \
		LOG_DEBUG("OS_CHECKSTATE ERROR - State: " << std::hex << state); \
	} \
} while(0) 

#define OS_CHECKSTATE(x) do { \
	ReturnState state = (x);  \
	if (state != OS_OK) {  \
		LOG_DEBUG("OS_CHECKSTATE ERROR - State: " << std::hex << state); \
		return state; \
		} \
} while(0) 
    
#define OS_CHECKSTATE_THROW(x) do { \
	ReturnState state = (x);  \
	if (state != OS_OK) {  \
		LOG_DEBUG("OS_CHECKSTATE_THROW ERROR - State: " << std::hex << state); \
		throw state; \
	} \
} while(0) 

    #define OS_SAFEDELETE(x) do { if(x != NULL) { delete x; x = 0;} } while(0)
    #define OS_SAFEDELETE_ARRAY(x) do { if(x != NULL) { delete[] x; x = 0;} } while(0)

	#define KiB 1024
	#define MiB 1048576
	#define GiB 1073741824
}
